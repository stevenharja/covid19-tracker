{"version":3,"sources":["App.module.css","components/Stats/Stats.module.css","components/CovidResults/CovidResults.module.css","components/SelectInput/SelectInput.module.css","components/Map/MapMarkersList/MapMarkersList.js","components/Stats/Stats.js","components/CovidResults/CovidResults.js","components/SelectInput/SelectInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","mapMarkersList","props","data","map","item","position","countryInfo","lat","long","Marker","key","country","onclick","clicked","onMouseOver","e","target","openPopup","onMouseOut","closePopup","Popup","todayCases","stats","className","classes","Stats","Title","title","end","content","CountUp","separator","Result","updatedDate","Date","updated","toUTCString","undefined","weekday","year","month","day","hour","minute","countrySelected","StatsContainer","active","cases","deaths","recovered","todayDeaths","todayRecovered","Credit","href","rel","selectInput","options","forEach","element","push","value","label","onChange","changed","Select","placeholder","App","state","countrySelectedData","countriesData","worldwideData","countriesAffected","markerCountrySelectedHandler","setState","find","selectCountryHandler","selection","console","log","worldwideUrl","this","axiosGet","url","axios","get","response","markerList","countrySummary","loader","countrySelection","MapMarkersList","CovidResults","Fragment","type","color","height","width","Span","bounds","latLngBounds","latLng","Container","Logo","Map","center","zoom","minZoom","maxBounds","maxBoundsViscosity","TileLayer","attribution","noWrap","SelectInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f33ccc6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"App_Logo__VGf6b\",\"Map\":\"App_Map__xC-4h\",\"Container\":\"App_Container__tAoEB\",\"Span\":\"App_Span__2iHNG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Stats\":\"Stats_Stats__17_bh\",\"CountUp\":\"Stats_CountUp__absw2\",\"Title\":\"Stats_Title__2alxj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"CovidResults_Title__2tOIC\",\"StatsContainer\":\"CovidResults_StatsContainer__3Lbdv\",\"Credit\":\"CovidResults_Credit__39DnY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Select\":\"SelectInput_Select__1FwIf\"};","import React from \"react\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\r\n  iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\r\n  shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\r\n});\r\n\r\nconst mapMarkersList = (props) => {\r\n  const markers = props.data.map((item) => {\r\n    const position = [item.countryInfo.lat, item.countryInfo.long];\r\n    return (\r\n      <Marker\r\n        position={position}\r\n        key={item.country}\r\n        onclick={() => props.clicked(item.country)}\r\n        onMouseOver={(e) => {\r\n          e.target.openPopup();\r\n        }}\r\n        onMouseOut={(e) => {\r\n          e.target.closePopup();\r\n        }}\r\n      >\r\n        <Popup>{`${item.country}: Today's cases: ${item.todayCases}`}</Popup>\r\n      </Marker>\r\n    );\r\n  });\r\n  return markers;\r\n};\r\n\r\nexport default mapMarkersList;\r\n","import React from \"react\";\r\nimport CountUp from \"react-countup\";\r\nimport classes from \"./Stats.module.css\";\r\nconst stats = (props) => {\r\n  return (\r\n    <div className={classes.Stats}>\r\n      <div className={classes.Title}>{props.title}</div>\r\n      <CountUp\r\n        end={props.content}\r\n        className={classes.CountUp}\r\n        separator=\",\"\r\n      ></CountUp>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default stats;\r\n","import React from \"react\";\r\nimport Stats from \"../Stats/Stats\";\r\nimport classes from \"./CovidResults.module.css\";\r\n\r\nconst Result = (props) => {\r\n  if (props) {\r\n    const dateOptions = {\r\n      weekday: \"long\",\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n    };\r\n    const updatedDate = new Date(props.data.updated).toUTCString(\r\n      undefined,\r\n      dateOptions\r\n    );\r\n    return (\r\n      <div>\r\n        <div className={classes.Title}>\r\n          <h1>{props.countrySelected}</h1>\r\n          <h2>Last Updated: {updatedDate}</h2>\r\n        </div>\r\n        <div className={classes.StatsContainer}>\r\n          <Stats title={\"Current Active Cases\"} content={props.data.active} />\r\n          <Stats title={\"Total Cases\"} content={props.data.cases} />\r\n          <Stats title={\"Total Deaths\"} content={props.data.deaths} />\r\n          <Stats title={\"Total Recovered\"} content={props.data.recovered} />\r\n          <Stats title={\"Today's Cases\"} content={props.data.todayCases} />\r\n          <Stats title={\"Today's Deaths\"} content={props.data.todayDeaths} />\r\n          <Stats\r\n            title={\"Today's Recovered\"}\r\n            content={props.data.todayRecovered}\r\n          />\r\n          <div className={classes.Credit}>\r\n            Powered by:\r\n            <a\r\n              href=\"https://disease.sh/docs/#/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Disease.SH\r\n            </a>\r\n            <br />\r\n            Created by:\r\n            <a\r\n              href=\"https://github.com/stevenharja\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Steven Harjapramana\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport RSelect from \"react-select\";\r\nimport classes from \"./SelectInput.module.css\";\r\nconst selectInput = (props) => {\r\n  const options = [];\r\n  props.options.forEach((element) => {\r\n    options.push({ value: element, label: element });\r\n  });\r\n  return (\r\n    <RSelect\r\n      options={options}\r\n      onChange={props.changed}\r\n      className={classes.Select}\r\n      placeholder={\"Select a country:\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default selectInput;\r\n","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\nimport axios from \"axios\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport MapMarkersList from \"./components/Map/MapMarkersList/MapMarkersList\";\nimport CovidResults from \"./components/CovidResults/CovidResults\";\nimport SelectInput from \"./components/SelectInput/SelectInput\";\n\nclass App extends Component {\n  state = {\n    countrySelected: null,\n    countrySelectedData: null,\n    countriesData: null,\n    worldwideData: null,\n    countriesAffected: null,\n  };\n\n  async componentDidMount() {\n    console.log(\"[App.js] componentDidUpdate call\");\n    const countriesUrl = `https://disease.sh/v3/covid-19/countries?yesterday=true`;\n    const worldwideUrl = `https://disease.sh/v3/covid-19/all?yesterday=true`;\n    const countriesData = await this.axiosGet(countriesUrl);\n    const worldwideData = await this.axiosGet(worldwideUrl);\n    const countriesAffected = [];\n    countriesData.forEach((element) => {\n      countriesAffected.push(element.country);\n    });\n    this.setState({ countriesData, worldwideData, countriesAffected });\n  }\n\n  async axiosGet(url) {\n    const response = await axios.get(url);\n\n    const { data } = response;\n    return data;\n  }\n\n  markerCountrySelectedHandler = (country = null) => {\n    this.setState({ countrySelected: null });\n    if (country) {\n      const countrySelectedData = this.state.countriesData.find((element) => {\n        return element.country === country;\n      });\n      this.setState({ countrySelected: country, countrySelectedData });\n    }\n  };\n\n  selectCountryHandler = (selection) => {\n    this.setState({ countrySelected: null });\n    const countrySelectedData = this.state.countriesData.find((element) => {\n      return element.country === selection.value;\n    });\n    if (countrySelectedData) {\n      this.setState({ countrySelected: selection.value, countrySelectedData });\n    }\n  };\n  render() {\n    let markerList;\n    let countrySummary;\n    let loader;\n    let countrySelection = [];\n    if (this.state.countriesAffected) {\n      countrySelection.push(\"Worldwide\");\n      countrySelection.push(...this.state.countriesAffected);\n    }\n    if (this.state.countriesData) {\n      markerList = (\n        <MapMarkersList\n          data={this.state.countriesData}\n          clicked={this.markerCountrySelectedHandler}\n        />\n      );\n    }\n\n    if (this.state.worldwideData && !this.state.countrySelected) {\n      countrySummary = (\n        <CovidResults\n          countrySelected={\"Worldwide\"}\n          data={this.state.worldwideData}\n        />\n      );\n    }\n\n    if (this.state.countrySelected) {\n      countrySummary = (\n        <CovidResults\n          countrySelected={this.state.countrySelected}\n          data={this.state.countrySelectedData}\n        />\n      );\n    }\n\n    if (!this.state.countriesData || !this.state.worldwideData) {\n      loader = (\n        <React.Fragment>\n          <Loader type=\"ThreeDots\" color=\"#5b86e5\" height={200} width={200} />\n          <span className={classes.Span}>\n            If loading persists, please check again later.\n          </span>\n        </React.Fragment>\n      );\n    }\n\n    const bounds = L.latLngBounds(L.latLng(-90, -180), L.latLng(90, 180));\n\n    return (\n      <div className={classes.Container}>\n        <div className={classes.Logo}>COVID-19 Tracker</div>\n        <Map\n          center={[0, 0]}\n          zoom={3}\n          className={classes.Map}\n          minZoom={3}\n          maxBounds={bounds}\n          maxBoundsViscosity={1.0}\n        >\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            noWrap={true}\n          />\n          {markerList}\n        </Map>\n        {loader}\n        <SelectInput\n          options={countrySelection}\n          changed={this.selectCountryHandler}\n        />\n        {countrySummary}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.module.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}